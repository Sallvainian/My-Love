<?xml version="1.0" encoding="UTF-8"?>
<story-context>
  <metadata>
    <story-id>1.1</story-id>
    <story-key>1-1-technical-debt-audit-refactoring-plan</story-key>
    <epic-id>1</epic-id>
    <title>Technical Debt Audit & Refactoring Plan</title>
    <status>ready-for-dev</status>
    <generated-date>2025-10-30</generated-date>
  </metadata>

  <user-story>
    <as-a>developer</as-a>
    <i-want>to audit the vibe-coded prototype for technical debt</i-want>
    <so-that>I can identify and prioritize refactoring efforts before adding new features</so-that>
  </user-story>

  <acceptance-criteria>
    <criterion id="AC-1">Complete code review identifying: code smells, architectural inconsistencies, missing error handling, unused dependencies</criterion>
    <criterion id="AC-2">Document findings in technical-decisions.md</criterion>
    <criterion id="AC-3">Create prioritized refactoring checklist (critical vs. nice-to-have)</criterion>
    <criterion id="AC-4">Estimate effort for each refactoring item</criterion>
    <criterion id="AC-5">No code changes in this story - pure analysis</criterion>
  </acceptance-criteria>

  <tasks>
    <task id="T1" ac-ref="AC-1">
      <description>Audit codebase for code smells and architectural issues</description>
      <subtasks>
        <subtask>Review all TypeScript files in src/ for code smells</subtask>
        <subtask>Check for architectural inconsistencies in component structure</subtask>
        <subtask>Identify missing error handling in critical paths</subtask>
        <subtask>Audit package.json for unused dependencies</subtask>
        <subtask>Review Zustand store for state management issues</subtask>
        <subtask>Check IndexedDB service for potential bugs</subtask>
        <subtask>Review service worker configuration</subtask>
        <subtask>Identify any security vulnerabilities</subtask>
      </subtasks>
    </task>
    <task id="T2" ac-ref="AC-2">
      <description>Create technical-decisions.md documentation</description>
      <subtasks>
        <subtask>Document all findings in structured format</subtask>
        <subtask>Include code examples for each issue</subtask>
        <subtask>Categorize issues by severity</subtask>
        <subtask>Add recommendations for each issue</subtask>
      </subtasks>
    </task>
    <task id="T3" ac-ref="AC-3">
      <description>Build prioritized refactoring checklist</description>
      <subtasks>
        <subtask>Mark items as "critical" (blocks Epic 2-4 OR high crash risk)</subtask>
        <subtask>Mark items as "nice-to-have" (code style, minor optimizations)</subtask>
        <subtask>Sequence items by dependencies</subtask>
      </subtasks>
    </task>
    <task id="T4" ac-ref="AC-4">
      <description>Estimate effort for refactoring items</description>
      <subtasks>
        <subtask>Provide time estimates for each item (hours/days)</subtask>
        <subtask>Identify items that can be done in Stories 1.2-1.6</subtask>
        <subtask>Flag items that need separate stories</subtask>
      </subtasks>
    </task>
    <task id="T5" ac-ref="AC-5">
      <description>Verification</description>
      <subtasks>
        <subtask>Run `git diff` to confirm no code changes</subtask>
        <subtask>Verify only documentation files modified</subtask>
      </subtasks>
    </task>
  </tasks>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic Technical Specification: Foundation & Core Fixes</title>
        <section>Overview</section>
        <snippet>Epic 1 addresses critical technical debt from rapid vibe-coding. Must maintain 100% feature parity, enforce TypeScript strict mode, and reduce ESLint warnings to zero.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic Technical Specification: Foundation & Core Fixes</title>
        <section>Detailed Design - Services and Modules</section>
        <snippet>8 modules to review: zustand store, persist middleware, storageService, App.tsx, DailyMessage component, Environment config, Build pipeline, Deployment script</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic Technical Specification: Foundation & Core Fixes</title>
        <section>Risks, Assumptions, Open Questions</section>
        <snippet>R4: TypeScript Strict Mode Migration Effort (MEDIUM) - Enabling strict mode may reveal hundreds of type errors. Q2: Critical = blocks Epic 2-4 features OR high crash risk.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>Technology Stack</section>
        <snippet>React 19.1.1, TypeScript 5.9.3, Vite 7.1.7, Zustand 5.0.8 with persist middleware, IndexedDB via idb 8.0.3, Tailwind CSS 3.4.18, Framer Motion 12.23.24, vite-plugin-pwa 0.21.3</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>State Management - Zustand Store Architecture</section>
        <snippet>Single store: useAppStore. Persist middleware saves to LocalStorage 'my-love-storage' key. Partialize strategy: only persist critical state (settings, isOnboarded, messageHistory, moods).</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>PWA Architecture - Service Worker Strategy</section>
        <snippet>vite-plugin-pwa with Workbox. Auto-update mode. CacheFirst strategy for app shell, NetworkFirst for runtime requests. Pre-cached assets: JS, CSS, HTML, images.</snippet>
      </doc>
      <doc>
        <path>docs/component-inventory.md</path>
        <title>Component Inventory</title>
        <section>Implemented Components</section>
        <snippet>DailyMessage (main view with message card, animations, favorite toggle), Onboarding (4-step wizard, will be removed in Story 1.4).</snippet>
      </doc>
      <doc>
        <path>docs/data-models.md</path>
        <title>Data Models</title>
        <section>Core Type Definitions</section>
        <snippet>Settings, Message, Photo, Anniversary, MoodEntry interfaces. AppState includes persisted (settings, isOnboarded, messageHistory, moods) and in-memory state (messages, photos, currentMessage).</snippet>
      </doc>
      <doc>
        <path>docs/state-management.md</path>
        <title>State Management Documentation</title>
        <section>Zustand Patterns</section>
        <snippet>Actions follow imperative pattern. Persist middleware with partialize function. Store initialization flow via initializeApp() async action.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 1.1</section>
        <snippet>Technical Debt Audit & Refactoring Plan. Prerequisites: None. Pure analysis story.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Non-Functional Requirements</section>
        <snippet>NFR001: Performance targets (2s load, 60fps). NFR002: Offline support. NFR003: Browser compatibility. NFR004: Mobile responsiveness. NFR006: Code quality (strict mode, ESLint).</snippet>
      </doc>
      <doc>
        <path>package.json</path>
        <title>Package Configuration</title>
        <section>Dependencies</section>
        <snippet>Production: react 19.1.1, zustand 5.0.8, idb 8.0.3, framer-motion 12.23.24, lucide-react 0.548.0. Dev: typescript 5.9.3, vite 7.1.7, eslint 9.36.0, tailwindcss 3.4.18</snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>src/App.tsx</path>
        <kind>component</kind>
        <symbol>App</symbol>
        <lines></lines>
        <reason>Root component, initialization flow, conditional rendering (Onboarding vs DailyMessage). Critical for architectural review.</reason>
      </file>
      <file>
        <path>src/stores/useAppStore.ts</path>
        <kind>store</kind>
        <symbol>useAppStore</symbol>
        <lines></lines>
        <reason>Zustand store with persist middleware. Known bug with state persistence. Critical for state management audit.</reason>
      </file>
      <file>
        <path>src/services/storage.ts</path>
        <kind>service</kind>
        <symbol>storageService</symbol>
        <lines></lines>
        <reason>IndexedDB wrapper via idb library. Potential service worker compatibility issues. Critical for data layer audit.</reason>
      </file>
      <file>
        <path>src/components/DailyMessage/DailyMessage.tsx</path>
        <kind>component</kind>
        <symbol>DailyMessage</symbol>
        <lines></lines>
        <reason>Main app view. Review for error handling, animation performance, and integration with store.</reason>
      </file>
      <file>
        <path>src/components/Onboarding/Onboarding.tsx</path>
        <kind>component</kind>
        <symbol>Onboarding</symbol>
        <lines></lines>
        <reason>Will be removed in Story 1.4. Review for dead code and unused dependencies.</reason>
      </file>
      <file>
        <path>src/types/index.ts</path>
        <kind>types</kind>
        <symbol>TypeDefinitions</symbol>
        <lines></lines>
        <reason>Core type definitions. Review for TypeScript strict mode compliance.</reason>
      </file>
      <file>
        <path>vite.config.ts</path>
        <kind>config</kind>
        <symbol>ViteConfig</symbol>
        <lines></lines>
        <reason>Build configuration including PWA plugin. Review for environment variable support (Story 1.6).</reason>
      </file>
      <file>
        <path>eslint.config.js</path>
        <kind>config</kind>
        <symbol>ESLintConfig</symbol>
        <lines></lines>
        <reason>Linting configuration. Review for strict rules and current warning count.</reason>
      </file>
      <file>
        <path>tsconfig.json</path>
        <kind>config</kind>
        <symbol>TypeScriptConfig</symbol>
        <lines></lines>
        <reason>TypeScript compiler config. Check if strict mode is enabled, review compiler options.</reason>
      </file>
    </code>

    <dependencies>
      <node>
        <production>
          <package name="react" version="19.1.1"/>
          <package name="react-dom" version="19.1.1"/>
          <package name="zustand" version="5.0.8"/>
          <package name="idb" version="8.0.3"/>
          <package name="framer-motion" version="12.23.24"/>
          <package name="lucide-react" version="0.548.0"/>
          <package name="workbox-window" version="7.3.0"/>
        </production>
        <development>
          <package name="typescript" version="5.9.3"/>
          <package name="vite" version="7.1.7"/>
          <package name="tailwindcss" version="3.4.18"/>
          <package name="eslint" version="9.36.0"/>
          <package name="vite-plugin-pwa" version="1.1.0"/>
          <package name="gh-pages" version="6.3.0"/>
          <package name="autoprefixer" version="10.4.21"/>
          <package name="postcss" version="8.5.6"/>
        </development>
      </node>
    </dependencies>
  </artifacts>

  <interfaces>
    <!-- No new interfaces needed - pure analysis story -->
  </interfaces>

  <constraints>
    <constraint>No code changes allowed - this is a pure analysis and documentation story (AC-5)</constraint>
    <constraint>Must maintain 100% feature parity - document issues without breaking existing functionality</constraint>
    <constraint>Critical priority definition: Blocks Epic 2-4 features OR high crash risk (from tech-spec Q2)</constraint>
    <constraint>Nice-to-have priority definition: Code style, minor optimizations (from tech-spec Q2)</constraint>
    <constraint>All findings must be documented in docs/technical-decisions.md following existing docs structure</constraint>
    <constraint>TypeScript strict mode compliance check required for Story 1.5 planning</constraint>
    <constraint>ESLint warning count baseline needed for Story 1.5 zero-warning goal</constraint>
    <constraint>Unused dependency identification for Story 1.5 cleanup</constraint>
    <constraint>Follow existing documentation format (similar to architecture.md structure)</constraint>
  </constraints>

  <tests>
    <standards>
      <![CDATA[
No automated tests required for this story - pure analysis and documentation work.

Verification approach:
1. Manual code review using established patterns and best practices
2. Git diff verification to ensure no code changes
3. Documentation review for completeness and clarity
4. Checklist verification for prioritization logic

Post-completion verification:
- Run `git status` before and after - only docs/ directory should show changes
- Confirm no .ts, .tsx, .js, .jsx, or .css files modified
- Verify technical-decisions.md exists and follows docs structure
- Confirm refactoring checklist includes effort estimates
      ]]>
    </standards>

    <locations>
      <!-- No test files needed for this story -->
    </locations>

    <ideas>
      <test-idea ac-ref="AC-1">
        <description>Code review checklist validation</description>
        <approach>Manual verification that all areas listed in tech-spec are covered: state management, data layer, components, build/deploy</approach>
      </test-idea>
      <test-idea ac-ref="AC-2">
        <description>Documentation completeness check</description>
        <approach>Verify technical-decisions.md includes: findings, code examples, severity categories, recommendations</approach>
      </test-idea>
      <test-idea ac-ref="AC-3">
        <description>Prioritization criteria validation</description>
        <approach>Confirm checklist uses defined criteria: critical (blocks Epic 2-4 OR high crash risk), nice-to-have (code style, minor optimizations)</approach>
      </test-idea>
      <test-idea ac-ref="AC-4">
        <description>Effort estimate reasonableness</description>
        <approach>Review estimates for realism, check mapping to Stories 1.2-1.6 timebox</approach>
      </test-idea>
      <test-idea ac-ref="AC-5">
        <description>No code changes verification</description>
        <approach>Run `git diff` and confirm only documentation files changed, no source code modifications</approach>
      </test-idea>
    </ideas>
  </tests>

  <notes>
    <![CDATA[
CRITICAL AUDIT FOCUS AREAS:

1. Zustand Persist Middleware (Story 1.2 dependency):
   - Verify partialize configuration in src/stores/useAppStore.ts
   - Check what's being persisted to LocalStorage vs. in-memory only
   - Identify the persistence bug preventing state restoration

2. IndexedDB Service Worker Compatibility (Story 1.3 dependency):
   - Review src/services/storage.ts for transaction patterns
   - Check vite.config.ts PWA plugin configuration
   - Identify potential conflicts between Workbox cache and IndexedDB

3. TypeScript Strict Mode Readiness (Story 1.5 dependency):
   - Check tsconfig.json current settings
   - Estimate type error count if strict mode enabled
   - Identify files needing most work

4. ESLint Warning Baseline (Story 1.5 dependency):
   - Run `npm run lint` to get current warning count
   - Categorize warnings by type and severity
   - Identify quick wins vs. major refactors

5. Onboarding Component Analysis (Story 1.4 dependency):
   - Review src/components/Onboarding/Onboarding.tsx
   - Identify dependencies that can be removed after deletion
   - Check for any shared code that needs extraction

6. Build/Deploy Configuration (Story 1.6 dependency):
   - Review vite.config.ts for env var support gaps
   - Check deploy script in package.json
   - Identify smoke test requirements

FIRST STORY IN EPIC:
- No predecessor context to learn from
- Establishes baseline understanding for all subsequent Epic 1 stories
- Findings will inform Stories 1.2-1.6 implementation approach
- Critical priority decisions affect entire epic sequencing
    ]]>
  </notes>
</story-context>
