<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2</storyId>
    <title>Component Integration Tests</title>
    <status>drafted</status>
    <generatedAt>2025-10-30</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/2-2-testing-component-integration.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>integration tests for all Epic 1 features</iWant>
    <soThat>I can verify core functionality works as expected</soThat>
    <tasks>
      <!-- Set up test fixtures and page objects -->
      <task id="2.2.T1" status="pending" ac="1-7">
        Set up test fixtures and page objects (baseFixture.ts with cleanApp, appWithMessages, appWithFavorites)
      </task>

      <!-- Write message display test suite -->
      <task id="2.2.T2" status="pending" ac="1,4">
        Write message display test suite (tests/e2e/message-display.spec.ts) - 10 tests for message rotation, animations, category badges, duration counter
      </task>

      <!-- Write favorites test suite -->
      <task id="2.2.T3" status="pending" ac="2">
        Write favorites test suite (tests/e2e/favorites.spec.ts) - 8 tests for toggle, persistence, offline mode, animations
      </task>

      <!-- Write settings test suite -->
      <task id="2.2.T4" status="pending" ac="3">
        Write settings test suite (tests/e2e/settings.spec.ts) - 6 tests for pre-configured data, editing name/date, persistence
      </task>

      <!-- Write navigation test suite -->
      <task id="2.2.T5" status="pending" ac="5">
        Write navigation test suite (tests/e2e/navigation.spec.ts) - 5 tests for theme switching across 4 themes and persistence
      </task>

      <!-- Write persistence test suite -->
      <task id="2.2.T6" status="pending" ac="7">
        Write persistence test suite (tests/e2e/persistence.spec.ts) - 8 tests for LocalStorage/IndexedDB hydration, offline operations, quota handling
      </task>

      <!-- Run all tests and validate pass rate -->
      <task id="2.2.T7" status="pending" ac="6">
        Run all tests 10 times consecutively and validate 100% pass rate (370/370 tests pass, no flakiness)
      </task>

      <!-- Verify test coverage completeness -->
      <task id="2.2.T8" status="pending" ac="1-7">
        Verify 100% Epic 1 feature coverage and generate HTML test report
      </task>

      <!-- Optimize test execution time -->
      <task id="2.2.T9" status="pending" ac="6">
        Optimize test execution time to meet target (&lt; 5 minutes locally with 4 workers)
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC-2.2.1">
      <description>Test suite for message display and rotation logic</description>
      <validationSteps>
        - Test: Daily message rotates correctly based on date (deterministic algorithm)
        - Test: Message card entrance animation plays (3D rotation, scale)
        - Test: Category badge displays correct category for message
        - Test: Relationship duration counter calculates days correctly from start date
        - Test: Message text renders completely without truncation
        - All tests pass in Chromium, Firefox (WebKit when available)
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.2">
      <description>Test suite for favorites functionality (add, remove, persist)</description>
      <validationSteps>
        - Test: Clicking heart button toggles favorite on/off
        - Test: Favorited message persists after browser refresh
        - Test: Favorite persists in offline mode (service worker + IndexedDB)
        - Test: Heart animation (10 floating hearts) plays on favorite action
        - Test: Favorites list displays all favorited messages correctly
        - All tests validate both UI state and IndexedDB persistence
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.3">
      <description>Test suite for settings page (edit name/date, persist changes)</description>
      <validationSteps>
        - Test: Pre-configured partner name loads from constants on first app init
        - Test: Pre-configured relationship start date loads correctly
        - Test: Editing partner name updates LocalStorage and persists across refresh
        - Test: Editing start date updates relationship duration counter immediately
        - Test: Settings changes persist across 24-hour browser gap
        - All tests validate LocalStorage persistence via Zustand persist middleware
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.4">
      <description>Test suite for relationship duration calculation accuracy</description>
      <validationSteps>
        - Test: Duration counter shows correct days from start date to today
        - Test: Duration updates correctly when start date is modified
        - Test: Duration handles leap years correctly
        - Test: Duration handles timezone differences gracefully
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.5">
      <description>Test suite for navigation between Home, Favorites, Settings</description>
      <validationSteps>
        - Test: Theme switching works (all 4 themes: Blossom Pink, Ocean Dreams, Sunset Glow, Starlit Night)
        - Test: Theme selection persists across browser refresh
        - Test: Theme CSS variables update correctly on theme change
        - Test: Navigation state persists in LocalStorage
        - Note: Full multi-page navigation deferred to Epic 3 (single-view architecture currently)
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.6">
      <description>All tests pass consistently (no flakiness)</description>
      <validationSteps>
        - Run all test suites 10 times consecutively
        - Pass rate must be 100% (37 tests × 10 runs = 370 passing)
        - No timeout errors or race conditions
        - No intermittent selector failures
      </validationSteps>
    </criterion>

    <criterion id="AC-2.2.7">
      <description>Tests validate both UI state and data persistence (LocalStorage, IndexedDB)</description>
      <validationSteps>
        - Every test that modifies state verifies both immediate UI update and underlying storage persistence
        - Use PWA helpers to inspect IndexedDB and LocalStorage directly
        - Validate state hydration works correctly on app re-initialization
      </validationSteps>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Epic 2 Technical Specification - Testing Infrastructure</title>
        <section>Story 2.2 - Component Integration Tests</section>
        <snippet>Story 2.2 implements comprehensive integration tests for all Epic 1 features using Playwright framework. Target: 37 test cases across 5 test suites (message-display, favorites, settings, navigation, persistence) covering 100% of Epic 1 critical user paths. Tests must validate offline-first PWA architecture including service worker, IndexedDB, and LocalStorage operations.</snippet>
      </doc>

      <doc>
        <path>docs/epics.md</path>
        <title>Epics Overview</title>
        <section>Story 2.2 - Component Integration Tests</section>
        <snippet>Builds upon Playwright framework from Story 2.1 by implementing comprehensive integration tests for all Epic 1 features. Covers message display/rotation, favorites persistence, settings management, navigation/theme switching, and data persistence across browser sessions. Prerequisites: Story 2.1 complete with PWA helpers and multi-browser configuration.</snippet>
      </doc>

      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR001, NFR002, NFR006 - Quality Goals</section>
        <snippet>NFR001: Performance target for tests (&lt; 5 min locally, &lt; 10 min CI). NFR002: Offline support validation requirements. NFR006: Code Quality - Tests must validate TypeScript strict mode compliance, ESLint standards. Test framework must validate offline-first architecture.</snippet>
      </doc>

      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>Component Architecture and State Management</section>
        <snippet>Component tree: App → ErrorBoundary → DailyMessage with all interactions. State management: Zustand with persist middleware (LocalStorage key: 'my-love-storage'). Data layer: IndexedDB 'my-love-db' with object stores: photos, messages. PWA: vite-plugin-pwa with Workbox service worker, CacheFirst strategies.</snippet>
      </doc>

      <doc>
        <path>tests/README.md</path>
        <title>Testing Documentation</title>
        <section>PWA Test Helpers API and Guidelines</section>
        <snippet>Comprehensive guide for E2E testing with Playwright. PWA-specific helpers: waitForServiceWorker, clearIndexedDB, clearLocalStorage, goOffline, goOnline, getIndexedDBStore, getLocalStorageItem, setLocalStorageItem. Test organization patterns, debugging guide, and CI integration documented. Service worker limitation: requires production build, not available in Vite dev mode.</snippet>
      </doc>

      <doc>
        <path>docs/state-management.md</path>
        <title>State Management Documentation</title>
        <section>Zustand Persist Middleware Configuration</section>
        <snippet>Zustand store with persist middleware configured to save settings, messageHistory, and moods to LocalStorage. Partialize strategy keeps messages and photos in-memory only. LocalStorage key: 'my-love-storage'. Hydration occurs on app initialization.</snippet>
      </doc>

      <doc>
        <path>docs/data-models.md</path>
        <title>Data Models Documentation</title>
        <section>Message, Photo, and Mood Interfaces</section>
        <snippet>Core data types: Message (id, content, category, createdAt), Photo (id, url, caption, uploadDate), Mood (id, type, note, timestamp). IndexedDB schema with object stores for photos and messages. LocalStorage schema for settings and history.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>tests/support/helpers/pwaHelpers.ts</path>
        <kind>test-helper</kind>
        <symbol>waitForServiceWorker, clearIndexedDB, goOffline, goOnline, getLocalStorageItem, setLocalStorageItem, clearLocalStorage, getIndexedDBStore</symbol>
        <lines>1-302</lines>
        <reason>PWA-specific test helpers from Story 2.1. Essential for test isolation (clearIndexedDB, clearLocalStorage) and offline testing (goOffline, goOnline). Use in all test suites for service worker validation and storage inspection.</reason>
      </artifact>

      <artifact>
        <path>tests/e2e/setup-validation.spec.ts</path>
        <kind>test</kind>
        <symbol>Test suite example from Story 2.1</symbol>
        <lines>1-50</lines>
        <reason>Example test pattern from Story 2.1 showing proper use of PWA helpers, test structure, and Playwright configuration. Reference for test writing conventions.</reason>
      </artifact>

      <artifact>
        <path>playwright.config.ts</path>
        <kind>config</kind>
        <symbol>PlaywrightConfig</symbol>
        <lines>1-80</lines>
        <reason>Test framework configuration from Story 2.1. Defines baseURL (http://localhost:5173/My-Love/), browser projects (Chromium, Firefox), workers (4 local, 2 CI), timeout (30000ms), and reporters (html, github).</reason>
      </artifact>

      <artifact>
        <path>src/stores/useAppStore.ts</path>
        <kind>store</kind>
        <symbol>useAppStore (Zustand store with persist middleware)</symbol>
        <lines>1-200</lines>
        <reason>Zustand state management with persist middleware. Tests must validate state persistence (settings, messageHistory, moods) to LocalStorage key 'my-love-storage'. Actions to test: toggleFavorite, updateSettings, setTheme, addMoodEntry.</reason>
      </artifact>

      <artifact>
        <path>src/config/constants.ts</path>
        <kind>config</kind>
        <symbol>APP_CONFIG (defaultPartnerName, defaultStartDate, isPreConfigured)</symbol>
        <lines>1-40</lines>
        <reason>Pre-configured relationship data from Story 1.4. Tests must validate that settings load from these constants on first app init (AC-2.2.3). Currently configured: partner name 'Gracie', start date '2025-10-18'.</reason>
      </artifact>

      <artifact>
        <path>src/components/DailyMessage/DailyMessage.tsx</path>
        <kind>component</kind>
        <symbol>DailyMessage (main app component)</symbol>
        <lines>1-300</lines>
        <reason>Main application component containing message display, favorite button, category badge, relationship duration counter. Primary component under test for AC-2.2.1, AC-2.2.2, AC-2.2.4. Contains all interactive elements that need data-testid attributes (Story 2.3).</reason>
      </artifact>

      <artifact>
        <path>src/App.tsx</path>
        <kind>component</kind>
        <symbol>App (root component)</symbol>
        <lines>1-50</lines>
        <reason>Root component with ErrorBoundary wrapping DailyMessage. Tests validate full component tree initialization and error handling boundaries.</reason>
      </artifact>

      <artifact>
        <path>src/services/storage.ts</path>
        <kind>service</kind>
        <symbol>storageService (IndexedDB abstraction)</symbol>
        <lines>1-200</lines>
        <reason>IndexedDB operations service using idb 8.0.3. Provides CRUD operations for photos and messages stores. Tests must validate IndexedDB operations in offline mode (AC-2.2.2, AC-2.2.7).</reason>
      </artifact>

      <artifact>
        <path>src/utils/messageRotation.ts</path>
        <kind>util</kind>
        <symbol>getTodayMessage, isNewDay</symbol>
        <lines>1-100</lines>
        <reason>Message rotation algorithm for date-based message selection (AC-2.2.1). Tests must validate deterministic message rotation across date changes.</reason>
      </artifact>

      <artifact>
        <path>src/utils/themes.ts</path>
        <kind>util</kind>
        <symbol>Theme definitions and utilities</symbol>
        <lines>1-80</lines>
        <reason>Theme configuration for 4 themes: Blossom Pink, Ocean Dreams, Sunset Glow, Starlit Night (AC-2.2.5). Tests must validate theme switching and CSS variable updates.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="@playwright/test" version="^1.56.1" scope="devDependencies" />
        <package name="@types/node" version="^24.6.0" scope="devDependencies" />
        <package name="react" version="^19.1.1" scope="dependencies" />
        <package name="zustand" version="^5.0.8" scope="dependencies" />
        <package name="idb" version="^8.0.3" scope="dependencies" />
        <package name="framer-motion" version="^12.23.24" scope="dependencies" />
        <package name="vite" version="^7.1.7" scope="devDependencies" />
        <package name="vite-plugin-pwa" version="^1.1.0" scope="devDependencies" />
        <package name="typescript" version="~5.9.3" scope="devDependencies" />
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="no-source-modification">
      Tests MUST NOT modify application source code (src/**). Story 2.2 is test writing only. Story 2.3 will add data-testid attributes to components.
    </constraint>

    <constraint type="pwa-compatibility">
      Tests must work with offline-first PWA architecture including service worker registration, IndexedDB operations, and LocalStorage persistence.
    </constraint>

    <constraint type="test-isolation">
      All tests must use clearIndexedDB and clearLocalStorage in beforeEach hooks to ensure clean state and prevent test pollution.
    </constraint>

    <constraint type="browser-compatibility">
      Tests must pass in Chromium and Firefox. WebKit support optional (system dependencies may not be available).
    </constraint>

    <constraint type="performance">
      Test execution time must be &lt; 5 minutes locally (4 workers) and &lt; 10 minutes in CI (2 workers) per NFR001.
    </constraint>

    <constraint type="service-worker-limitation">
      Service worker tests require production build. Service workers don't register in Vite dev mode. May need to skip service worker tests or document limitation until Story 2.4 configures auto-start preview server.
    </constraint>

    <constraint type="no-flakiness">
      100% pass rate required across 10 consecutive runs (AC-2.2.6). Use explicit waits (expect().toBeVisible()), not arbitrary sleep() calls.
    </constraint>

    <constraint type="selector-strategy">
      Use semantic CSS selectors temporarily until Story 2.3 adds data-testid attributes. Prepare tests for migration to data-testid selectors.
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>PWA Test Helpers API</name>
      <kind>function-signatures</kind>
      <signature>
        waitForServiceWorker(page: Page, timeout?: number): Promise&lt;void&gt;
        clearIndexedDB(page: Page, dbName: string): Promise&lt;void&gt;
        goOffline(page: Page): Promise&lt;void&gt;
        goOnline(page: Page): Promise&lt;void&gt;
        getLocalStorageItem(page: Page, key: string): Promise&lt;string | null&gt;
        setLocalStorageItem(page: Page, key: string, value: string): Promise&lt;void&gt;
        clearLocalStorage(page: Page): Promise&lt;void&gt;
        getIndexedDBStore(page: Page, dbName: string, storeName: string): Promise&lt;any[]&gt;
      </signature>
      <path>tests/support/helpers/pwaHelpers.ts</path>
    </interface>

    <interface>
      <name>Zustand AppStore Actions</name>
      <kind>store-interface</kind>
      <signature>
        initializeApp(): Promise&lt;void&gt;
        toggleFavorite(messageId: number): Promise&lt;void&gt;
        updateSettings(updates: Partial&lt;Settings&gt;): void
        setTheme(theme: ThemeName): void
        addMoodEntry(mood: MoodEntry['mood'], note?: string): void
      </signature>
      <path>src/stores/useAppStore.ts</path>
    </interface>

    <interface>
      <name>Playwright Test Configuration</name>
      <kind>config-interface</kind>
      <signature>
        baseURL: 'http://localhost:5173/My-Love/'
        timeout: 30000ms
        workers: 4 (local) | 2 (CI)
        retries: 0 (local) | 2 (CI)
        browsers: ['chromium', 'firefox']
      </signature>
      <path>playwright.config.ts</path>
    </interface>

    <interface>
      <name>Storage Keys</name>
      <kind>constants</kind>
      <signature>
        LocalStorage key: 'my-love-storage' (Zustand persist)
        IndexedDB database: 'my-love-db'
        IndexedDB stores: 'photos', 'messages'
      </signature>
      <path>src/stores/useAppStore.ts, src/services/storage.ts</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
      Testing framework: Playwright 1.56.1+ with TypeScript configuration. Test structure follows Arrange-Act-Assert pattern with beforeEach hooks for test isolation using clearIndexedDB and clearLocalStorage helpers. All tests must use explicit waits (expect().toBeVisible()) rather than arbitrary timeouts. PWA-specific helpers required for service worker, IndexedDB, and offline mode testing. Test fixtures pattern encouraged for reusable setup (cleanApp, appWithMessages, appWithFavorites). HTML test reports generated at playwright-report/index.html with screenshots on failure. Multi-browser execution (Chromium, Firefox) with parallel workers (4 local, 2 CI). Service worker limitation: tests requiring SW must use production build or skip until Story 2.4 complete.
    </standards>

    <locations>
      <location>tests/e2e/*.spec.ts</location>
      <location>tests/support/helpers/pwaHelpers.ts</location>
      <location>tests/support/fixtures/baseFixture.ts (to be created)</location>
      <location>tests/support/pages/*.ts (optional Page Object pattern)</location>
      <location>playwright-report/ (generated HTML test reports)</location>
      <location>playwright.config.ts (test configuration)</location>
    </locations>

    <ideas>
      <idea ac="AC-2.2.1">
        Test suite: message-display.spec.ts - Validate deterministic message rotation based on mocked dates, verify message card entrance animations play (3D rotation, scale transforms), assert category badge displays correct category, validate relationship duration counter calculates days accurately from APP_CONFIG.defaultStartDate to today, test long message text renders without overflow or truncation
      </idea>

      <idea ac="AC-2.2.2">
        Test suite: favorites.spec.ts - Test favorite toggle button changes state (filled/outline heart icon), verify favorited message persists in IndexedDB after page refresh using getIndexedDBStore helper, test favorite persists in offline mode after goOffline helper and service worker registration, validate heart animation spawns 10 floating hearts on favorite action, test favorites list displays all favorited messages with filled heart icons
      </idea>

      <idea ac="AC-2.2.3">
        Test suite: settings.spec.ts - Clear LocalStorage and verify pre-configured partner name loads from APP_CONFIG.defaultPartnerName on first init, verify pre-configured start date loads from APP_CONFIG.defaultStartDate, test editing partner name updates LocalStorage 'my-love-storage' key and persists across refresh, test editing start date updates duration counter immediately and persists, mock Date.now() to 24 hours later and verify settings persist across simulated time gap
      </idea>

      <idea ac="AC-2.2.4">
        Test suite: message-display.spec.ts (duration tests) - Calculate expected days from APP_CONFIG.defaultStartDate to today and assert duration counter matches, test duration updates correctly when start date is modified in settings, test duration calculation handles leap years (set start date to leap year and verify), test duration handles timezone differences gracefully (mock different timezone scenarios)
      </idea>

      <idea ac="AC-2.2.5">
        Test suite: navigation.spec.ts - Test theme switching to each of 4 themes (Blossom Pink, Ocean Dreams, Sunset Glow, Starlit Night) and assert CSS variables (--primary, --secondary) update correctly, verify theme selection persists in LocalStorage across page refresh, test theme CSS variables apply correctly on app reload, validate navigation state persists (currently single-view, future multi-page in Epic 3)
      </idea>

      <idea ac="AC-2.2.6">
        Flakiness validation script: Run 'for i in {1..10}; do npm run test:e2e; done' and track pass/fail for each run, calculate pass rate (passing / 370 total) × 100, target 100% pass rate with zero flaky tests, if flakiness detected identify inconsistent tests and add explicit waits or fix race conditions
      </idea>

      <idea ac="AC-2.2.7">
        Persistence validation pattern: For every test that modifies state (favorite, settings, theme), verify both immediate UI update AND underlying storage persistence using getLocalStorageItem or getIndexedDBStore helpers. Test LocalStorage hydration on app init by using setLocalStorageItem to pre-populate state then navigate and verify state restored. Test IndexedDB operations in offline mode using goOffline helper and validate reads/writes succeed. Test quota exceeded scenarios by filling storage to limit and asserting graceful error handling.
      </idea>

      <idea ac="1-7">
        Test fixtures to create: cleanApp fixture clears all storage before test, appWithMessages fixture pre-loads default messages from src/data/defaultMessages.ts, appWithFavorites fixture pre-populates 5 favorited messages in IndexedDB. Optional Page Object for DailyMessage component with methods: favoriteMessage(), getMessageText(), getDurationCounter(), switchTheme(), navigateToSettings()
      </idea>

      <idea ac="1-7">
        Service worker testing strategy: Tests requiring service worker (offline favorites persistence, cache validation) should either: (1) document limitation 'Service worker tests require production build', or (2) use describe.skip() to skip until Story 2.4 configures auto-start preview server, or (3) run against production build using 'npm run preview' for CI validation
      </idea>
    </ideas>
  </tests>
</story-context>
