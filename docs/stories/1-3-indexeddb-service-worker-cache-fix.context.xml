<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>3</storyId>
    <title>IndexedDB Service Worker Cache Fix</title>
    <status>drafted</status>
    <generatedAt>2025-10-30</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-3-indexeddb-service-worker-cache-fix.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer</asA>
    <iWant>to ensure IndexedDB operations work correctly with the service worker</iWant>
    <soThat>photos and messages persist reliably offline</soThat>
    <tasks>
      <task id="1" ac="1,2">
        <title>Audit Current IndexedDB and Service Worker Setup</title>
        <subtasks>
          <subtask>Review src/services/storageService.ts for IndexedDB initialization and transaction handling</subtask>
          <subtask>Review service worker configuration in vite.config.ts (vite-plugin-pwa settings)</subtask>
          <subtask>Identify if service worker cache strategies intercept IndexedDB requests</subtask>
          <subtask>Document current Workbox strategies and IndexedDB interaction patterns</subtask>
          <subtask>Check for any existing error handling in storageService</subtask>
        </subtasks>
      </task>
      <task id="2" ac="2,3">
        <title>Fix Service Worker / IndexedDB Conflicts</title>
        <subtasks>
          <subtask>Configure Workbox to exclude IndexedDB operations from caching</subtask>
          <subtask>Update vite.config.ts with navigateFallbackDenylist or runtime caching rules if needed</subtask>
          <subtask>Ensure service worker doesn't cache IndexedDB API calls</subtask>
          <subtask>Verify IndexedDB transactions complete independently of SW cache state</subtask>
          <subtask>Test SW activation doesn't block IndexedDB initialization</subtask>
        </subtasks>
      </task>
      <task id="3" ac="1,2">
        <title>Enhance IndexedDB Error Handling</title>
        <subtasks>
          <subtask>Apply Story 1.2 error handling pattern to storageService.ts</subtask>
          <subtask>Add try-catch blocks to all IndexedDB operations (init, getMessages, addMessage, etc.)</subtask>
          <subtask>Implement comprehensive console logging for debugging</subtask>
          <subtask>Add fallback behavior if IndexedDB operations fail offline</subtask>
          <subtask>Handle edge cases: quota exceeded, corrupted database, blocked transactions</subtask>
        </subtasks>
      </task>
      <task id="4" ac="4">
        <title>Offline Photo Persistence Testing</title>
        <subtasks>
          <subtask>Test: Enable offline mode in DevTools → Add photo → Verify IndexedDB write succeeds</subtask>
          <subtask>Test: Go online → Verify photo persists and displays in gallery</subtask>
          <subtask>Test: Close app offline → Reopen offline → Verify photo still accessible</subtask>
          <subtask>Document test procedure for future validation</subtask>
        </subtasks>
      </task>
      <task id="5" ac="5">
        <title>Offline Message Favorite Persistence Testing</title>
        <subtasks>
          <subtask>Test: Enable offline mode → Favorite a message → Verify IndexedDB update succeeds</subtask>
          <subtask>Test: Restart app (force reload) → Verify favorite status persists</subtask>
          <subtask>Test: Toggle favorite offline multiple times → Verify all changes persist</subtask>
          <subtask>Test: Service worker active and offline → Verify favorites work correctly</subtask>
        </subtasks>
      </task>
      <task id="6" ac="1,2,3">
        <title>Comprehensive Offline Scenario Testing</title>
        <subtasks>
          <subtask>Test: Fresh install offline → Verify app initializes with default messages</subtask>
          <subtask>Test: Service worker update scenario → Verify IndexedDB data intact after SW update</subtask>
          <subtask>Test: Browser restart offline → Verify all persisted data accessible</subtask>
          <subtask>Test: Network toggle (online/offline/online) → Verify no data loss</subtask>
          <subtask>Regression test: All existing features work (message display, favorites, theme)</subtask>
        </subtasks>
      </task>
      <task id="7" ac="3">
        <title>Documentation Updates</title>
        <subtasks>
          <subtask>Document service worker configuration changes in docs/state-management.md or new docs/pwa-offline.md</subtask>
          <subtask>Add troubleshooting section for IndexedDB/SW conflicts</subtask>
          <subtask>Document offline testing procedures</subtask>
          <subtask>Update architecture.md if PWA patterns changed</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">IndexedDB operations complete successfully even when offline</criterion>
    <criterion id="2">Service worker doesn't interfere with IndexedDB transactions</criterion>
    <criterion id="3">Cache strategy updated if needed for IndexedDB compatibility</criterion>
    <criterion id="4">Test: Add photo offline, go online, verify photo persists</criterion>
    <criterion id="5">Test: Favorite message, restart app, verify favorite persists</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>Data Architecture - IndexedDB Schema</section>
        <snippet>Database: my-love-db (version 1) with two object stores: photos (key auto-increment, indexes by-date) and messages (key auto-increment, indexes by-category, by-date). Service worker uses vite-plugin-pwa with Workbox for PWA features.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>PWA Architecture - Service Worker Strategy</section>
        <snippet>Service worker uses CacheFirst strategy for app shell (JS, CSS, HTML, images) via Workbox. Pre-caches all static assets using glob patterns. Data flow: User Action → Component → Zustand Store Action → storageService → IndexedDB.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>Testing - Offline Testing</section>
        <snippet>Manual testing with DevTools Network tab offline mode. Verify app functions, check Application tab for IndexedDB/Service Worker status. Test scenarios include offline operations, network throttling, and PWA score validation via Lighthouse.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Technical Specification</title>
        <section>Story 1.3 - IndexedDB Service Worker Cache Fix</section>
        <snippet>Ensures IndexedDB transactions complete successfully when service worker is active. No schema changes required - operational reliability fix only. Must maintain offline-first capability (NFR002). Service worker should not intercept IndexedDB operations.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Technical Specification</title>
        <section>Services and Modules</section>
        <snippet>storageService (idb wrapper) provides IndexedDB CRUD operations. App.tsx → useAppStore.initializeApp() → storageService.init() → IndexedDB open. User action → Component → Store action → storageService → IndexedDB + LocalStorage.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Technical Specification</title>
        <section>Critical Workflow 1 - App Initialization</section>
        <snippet>Initialize IndexedDB (ensure no SW conflicts) → Load messages from IndexedDB → If empty, populate with 100 default messages. IndexedDB transactions must remain async and service worker should not intercept operations. Target: Message load &lt; 100ms for 365 messages.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Technical Specification</title>
        <section>Non-Functional Requirements - Error Handling</section>
        <snippet>Story 1.3 Critical: Service worker may interfere with IndexedDB transactions. Solution: Ensure SW cache strategy doesn't block DB operations. Test: Go offline → favorite message → go online → verify IndexedDB updated. Fallback: If IndexedDB fails to open, app renders with in-memory messages.</snippet>
      </doc>
      <doc>
        <path>docs/state-management.md</path>
        <title>State Management Documentation</title>
        <section>Persistence Configuration</section>
        <snippet>Messages and photos stored in IndexedDB (not LocalStorage). Persist middleware handles small config data in LocalStorage (settings, messageHistory, moods). Large data → IndexedDB, small config → LocalStorage. storageService wraps idb library for IndexedDB operations.</snippet>
      </doc>
      <doc>
        <path>docs/state-management.md</path>
        <title>State Management Documentation</title>
        <section>Troubleshooting Persistence Issues</section>
        <snippet>Use DevTools Application tab to inspect IndexedDB (my-love-db) and LocalStorage (my-love-storage). Check for transaction errors, quota exceeded, corrupted database. Messages and photos are NOT persisted to LocalStorage by design - they live in IndexedDB.</snippet>
      </doc>
      <doc>
        <path>docs/data-models.md</path>
        <title>Data Models Documentation</title>
        <section>Message Interface</section>
        <snippet>Message interface: id (number, auto-incremented), text (string), category (MessageCategory), isCustom (boolean), createdAt (Date), isFavorite (optional boolean). Stored in IndexedDB messages object store with indexes by-category and by-date.</snippet>
      </doc>
      <doc>
        <path>docs/stories/1-2-fix-zustand-persist-middleware-configuration.md</path>
        <title>Story 1.2 Context</title>
        <section>Learnings - Error Handling Pattern</section>
        <snippet>Error handling pattern established: Try-catch with fallback behavior, comprehensive console logging, automatic recovery without user prompts. Pattern location: src/stores/useAppStore.ts:297-321. Apply to storageService.ts: Wrap all IndexedDB operations in try-catch, log errors with context.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/services/storage.ts</path>
        <kind>service</kind>
        <symbol>StorageService</symbol>
        <lines>22-149</lines>
        <reason>Primary file - Contains all IndexedDB operations that need error handling enhancement. Methods: init(), addMessage(), getMessage(), getAllMessages(), toggleFavorite(), addMessages(). Currently lacks try-catch error handling per Story 1.2 pattern.</reason>
      </artifact>
      <artifact>
        <path>src/services/storage.ts</path>
        <kind>service</kind>
        <symbol>StorageService.init</symbol>
        <lines>25-50</lines>
        <reason>IndexedDB initialization method - Opens database and creates object stores. Critical for ensuring service worker doesn't block DB initialization. Needs error handling for: permission denied, quota exceeded, version conflicts.</reason>
      </artifact>
      <artifact>
        <path>vite.config.ts</path>
        <kind>config</kind>
        <symbol>VitePWA workbox configuration</symbol>
        <lines>36-54</lines>
        <reason>Service worker configuration - Defines caching strategies (CacheFirst for app shell, runtime caching for Google Fonts). May need updates to ensure IndexedDB operations not intercepted. Current config has no navigateFallbackDenylist or IndexedDB-specific exclusions.</reason>
      </artifact>
      <artifact>
        <path>src/App.tsx</path>
        <kind>component</kind>
        <symbol>App useEffect</symbol>
        <lines>9-12</lines>
        <reason>App initialization flow - Calls initializeApp() on mount. May need enhanced error handling if IndexedDB initialization fails, following Story 1.2 pattern with fallback behavior.</reason>
      </artifact>
      <artifact>
        <path>src/stores/useAppStore.ts</path>
        <kind>store</kind>
        <symbol>initializeApp</symbol>
        <lines>75-124</lines>
        <reason>State store initialization - Calls storageService.init() and loads messages from IndexedDB. Demonstrates existing error handling pattern: try-catch with isLoading state management. Pattern to apply to storageService.ts.</reason>
      </artifact>
      <artifact>
        <path>src/stores/useAppStore.ts</path>
        <kind>store</kind>
        <symbol>toggleFavorite</symbol>
        <lines>157-171</lines>
        <reason>Example of store action calling storageService - Shows integration pattern between Zustand store and IndexedDB. Pattern: try-catch → storageService call → optimistic state update → error recovery.</reason>
      </artifact>
      <artifact>
        <path>src/stores/useAppStore.ts</path>
        <kind>store</kind>
        <symbol>persist middleware config</symbol>
        <lines>282-292</lines>
        <reason>Demonstrates separation of LocalStorage (small config) vs IndexedDB (large data). Comments explain that messages/photos stored in IndexedDB via storageService, not persisted to LocalStorage.</reason>
      </artifact>
    </code>
    <dependencies>
      <runtime>
        <package name="idb" version="^8.0.3">IndexedDB wrapper library - Core dependency for all database operations in storageService</package>
        <package name="workbox-window" version="^7.3.0">Workbox client library - Service worker lifecycle management and communication</package>
        <package name="zustand" version="^5.0.8">State management - integrates with storageService for data persistence</package>
        <package name="react" version="^19.1.1">UI framework - App.tsx initialization flow</package>
      </runtime>
      <dev>
        <package name="vite-plugin-pwa" version="^1.1.0">Service worker and PWA manifest generation with Workbox - Critical for Story 1.3 service worker configuration</package>
        <package name="vite" version="^7.1.7">Build tool - bundling and development server</package>
        <package name="typescript" version="~5.9.3">Type checking for TypeScript codebase</package>
      </dev>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>No schema changes to IndexedDB - maintain my-love-db version 1 with existing photos and messages object stores</constraint>
    <constraint>No breaking changes to storageService API - all existing method signatures must remain unchanged</constraint>
    <constraint>Must maintain offline-first capability (NFR002) - app must function fully offline after initial load</constraint>
    <constraint>Apply Story 1.2 error handling pattern: try-catch blocks, comprehensive console logging, automatic recovery without user prompts</constraint>
    <constraint>Console logging only (no UI notifications until Story 1.5 ErrorBoundary implementation)</constraint>
    <constraint>Service worker must NOT intercept IndexedDB operations - IndexedDB transactions are not HTTP requests</constraint>
    <constraint>Preserve backward compatibility - existing IndexedDB data must remain accessible after changes</constraint>
    <constraint>Manual testing required (no automated test infrastructure yet per Story 1.1 findings)</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>StorageService.init</name>
      <kind>async method</kind>
      <signature>async init(): Promise&lt;void&gt;</signature>
      <path>src/services/storage.ts:25-50</path>
      <usage>Called by initializeApp in useAppStore.ts. Opens IndexedDB connection and creates object stores if needed.</usage>
    </interface>
    <interface>
      <name>StorageService.addMessage</name>
      <kind>async method</kind>
      <signature>async addMessage(message: Omit&lt;Message, 'id'&gt;): Promise&lt;number&gt;</signature>
      <path>src/services/storage.ts:82-85</path>
      <usage>Adds single message to IndexedDB. Returns auto-incremented id.</usage>
    </interface>
    <interface>
      <name>StorageService.getAllMessages</name>
      <kind>async method</kind>
      <signature>async getAllMessages(): Promise&lt;Message[]&gt;</signature>
      <path>src/services/storage.ts:92-95</path>
      <usage>Retrieves all messages from IndexedDB. Used in initializeApp and loadMessages.</usage>
    </interface>
    <interface>
      <name>StorageService.toggleFavorite</name>
      <kind>async method</kind>
      <signature>async toggleFavorite(messageId: number): Promise&lt;void&gt;</signature>
      <path>src/services/storage.ts:115-121</path>
      <usage>Toggles favorite status of message in IndexedDB. Called by useAppStore.toggleFavorite action.</usage>
    </interface>
    <interface>
      <name>VitePWA workbox.globPatterns</name>
      <kind>config array</kind>
      <signature>globPatterns: string[]</signature>
      <path>vite.config.ts:37</path>
      <usage>Defines which files to pre-cache. Currently: ['**/*.{js,css,html,png,jpg,jpeg,svg,woff2}']. Does not affect IndexedDB operations.</usage>
    </interface>
    <interface>
      <name>VitePWA workbox.runtimeCaching</name>
      <kind>config array</kind>
      <signature>runtimeCaching: RuntimeCaching[]</signature>
      <path>vite.config.ts:38-53</path>
      <usage>Defines runtime caching strategies. Currently only Google Fonts with CacheFirst. IndexedDB operations are NOT HTTP requests and should not appear here.</usage>
    </interface>
  </interfaces>
  <tests>
    <standards>No automated test infrastructure exists yet (confirmed by Story 1.1 audit). Manual testing required via browser DevTools. Testing approach: Use DevTools Network tab to enable offline mode, Application tab to inspect IndexedDB (my-love-db) and Service Workers status. Verify operations complete successfully, check Console for error logs from storageService. Test with service worker both enabled and disabled to compare behavior. Follow Story 1.2 pattern: comprehensive console logging for debugging, no UI test feedback until Story 1.5.</standards>

    <locations>
      <location>No test files exist yet - manual testing only</location>
      <location>Future location (Story 1.1+): tests/ or __tests__/ directory</location>
      <location>Manual testing: Chrome DevTools → Application tab → IndexedDB, Service Workers, Network</location>
    </locations>

    <ideas>
      <test ac="1,2" priority="high">
        <title>IndexedDB Operations Offline Test</title>
        <description>Enable offline mode in DevTools → Perform IndexedDB operations (add message, toggle favorite) → Verify operations complete successfully → Check Console for errors → Inspect IndexedDB in Application tab to confirm data written</description>
      </test>
      <test ac="2" priority="high">
        <title>Service Worker Non-Interference Test</title>
        <description>With service worker active → Perform IndexedDB transaction → Verify no "failed to execute transaction" errors in Console → Confirm IndexedDB operations do NOT appear in Network tab (they are not HTTP requests) → Compare behavior with SW disabled</description>
      </test>
      <test ac="3" priority="medium">
        <title>Service Worker Configuration Validation</title>
        <description>Review vite.config.ts → Verify Workbox caching strategies → Confirm no navigateFallbackDenylist needed → Verify IndexedDB operations not in runtimeCaching rules → Document rationale in architecture.md or new docs/pwa-offline.md</description>
      </test>
      <test ac="4" priority="high">
        <title>Offline Photo Persistence Test</title>
        <description>Enable offline mode → Add photo (future feature, may use placeholder) → Verify IndexedDB write succeeds in Application tab → Disable offline mode → Verify photo persists and displays → Close app offline → Reopen offline → Verify photo still accessible</description>
      </test>
      <test ac="5" priority="high">
        <title>Offline Message Favorite Persistence Test</title>
        <description>Enable offline mode → Favorite a message → Check IndexedDB in Application tab → Hard refresh (Cmd+Shift+R) → Verify favorite persists after restart → Toggle favorite multiple times offline → Verify all changes persist → Test with service worker active and offline</description>
      </test>
      <test ac="1,2,3" priority="high">
        <title>Comprehensive Offline Scenarios</title>
        <description>Test: Fresh install offline → Verify default messages populate IndexedDB | Service worker update → Verify IndexedDB data intact | Browser restart offline → Verify all data accessible | Network toggle (online/offline/online) → Verify no data loss | Regression: All existing features work (message display, favorites, theme)</description>
      </test>
      <test ac="1,2" priority="medium">
        <title>Error Handling Validation</title>
        <description>Apply Story 1.2 pattern to storageService → Verify try-catch blocks added to all methods → Test error scenarios: permission denied, quota exceeded, corrupted database → Check Console for comprehensive error logging → Verify app doesn't crash, provides fallback behavior</description>
      </test>
    </ideas>
  </tests>
</story-context>
