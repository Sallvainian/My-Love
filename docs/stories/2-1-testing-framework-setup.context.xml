<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>1</storyId>
    <title>Testing Framework Setup</title>
    <status>drafted</status>
    <generatedAt>2025-10-30</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/2-1-testing-framework-setup.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>scaffold Playwright testing framework with PWA-specific helpers</iWant>
    <soThat>I can write comprehensive E2E tests for all app features</soThat>
    <tasks>
- Install Playwright and configure project (AC: 1, 4)
  - Run npm install --save-dev @playwright/test@^1.48.0
  - Run npx playwright install (install browser binaries)
  - Create playwright.config.ts at project root
  - Configure baseURL to 'http://localhost:5173/My-Love/'
  - Configure timeout: 30000 (30 seconds per test)
  - Configure retries: 0 locally, 2 in CI (use process.env.CI detection)
  - Configure workers: 4 locally, 2 in CI
  - Configure trace: 'on-first-retry'
  - Configure screenshot: 'only-on-failure'
  - Configure video: 'retain-on-failure'
  - Configure testDir: './tests/e2e'
  - Configure reporter: ['html', 'github'] (HTML for local, GitHub for CI)

- Configure multi-browser projects (AC: 4)
  - Add Chromium project with Desktop Chrome device preset
  - Add Firefox project with Desktop Firefox device preset
  - Add WebKit project with Desktop Safari device preset
  - Verify all projects inherit base configuration
  - Test configuration by running: npx playwright test --list

- Create test directory structure (AC: 2)
  - Create tests/ directory at project root
  - Create tests/e2e/ directory for test spec files
  - Create tests/support/ directory for shared utilities
  - Create tests/support/fixtures/ directory for test fixtures
  - Create tests/support/helpers/ directory for helper functions
  - Verify structure matches tech spec requirements

- Implement PWA test helpers (AC: 3)
  - Create tests/support/helpers/pwaHelpers.ts
  - Implement waitForServiceWorker(page, timeout = 30000)
  - Implement clearIndexedDB(page, dbName)
  - Implement goOffline(page)
  - Implement goOnline(page)
  - Implement getLocalStorageItem(page, key)
  - Implement setLocalStorageItem(page, key, value)
  - Implement clearLocalStorage(page)
  - Implement getIndexedDBStore(page, dbName, storeName)
  - Add TypeScript types for all helper functions
  - Export all helpers from pwaHelpers.ts

- Add test scripts to package.json (AC: 5)
  - Add test:e2e script: "playwright test"
  - Add test:e2e:ui script: "playwright test --ui"
  - Add test:e2e:debug script: "playwright test --debug"
  - Verify scripts run correctly
  - Document script usage in tests/README.md

- Create .env.test.example configuration (AC: 6)
  - Create .env.test.example at project root
  - Add BASE_URL, TEST_TIMEOUT, HEADLESS, SLOW_MO variables
  - Add comments explaining each variable's purpose
  - Add .env.test to .gitignore
  - Document .env.test usage in tests/README.md

- Create comprehensive tests/README.md documentation (AC: 7)
  - Add Testing Infrastructure Setup section
  - Add PWA Test Helpers API section
  - Add data-testid Naming Convention section
  - Add Test Organization Patterns section
  - Add Debugging Guide section
  - Add CI Integration section
  - Add Common Pitfalls and Solutions section

- Write example smoke test to validate setup (AC: 1, 3)
  - Create tests/e2e/setup-validation.spec.ts
  - Write test: "should load app homepage"
  - Write test: "should register service worker"
  - Write test: "should access LocalStorage"
  - Write test: "should simulate offline mode"
  - Run smoke tests in all 3 browsers
  - Verify all tests pass

- Validate framework setup and finalize (AC: 1-7)
  - Run full test suite: npm run test:e2e
  - Verify HTML report generated
  - Run UI mode: npm run test:e2e:ui
  - Run debug mode: npm run test:e2e:debug
  - Verify all 7 acceptance criteria met
  - Document any known limitations
    </tasks>
  </story>

  <acceptanceCriteria>
1. AC-2.1.1: Install @playwright/test and configure playwright.config.ts
   - @playwright/test ^1.48.0 installed as devDependency
   - playwright.config.ts created with TypeScript configuration
   - Base URL set to 'http://localhost:5173/My-Love/' (matches Vite dev server)
   - Timeout configured to 30000ms (30 seconds per test)
   - Trace collection enabled: 'on-first-retry'
   - Screenshot capture: 'only-on-failure'
   - Video recording: 'retain-on-failure'

2. AC-2.1.2: Set up test directory structure
   - tests/e2e/ directory created for test spec files
   - tests/support/fixtures/ directory created for reusable test fixtures
   - tests/support/helpers/ directory created for PWA helper utilities
   - Directory structure documented in tests/README.md

3. AC-2.1.3: Create PWA testing helpers
   - waitForServiceWorker(page, timeout) - Validates SW registration
   - clearIndexedDB(page, dbName) - Wipes IndexedDB for clean test state
   - goOffline(page) - Simulates offline network condition
   - goOnline(page) - Restores online network condition
   - getLocalStorageItem(page, key) - Reads LocalStorage value
   - setLocalStorageItem(page, key, value) - Writes LocalStorage value
   - clearLocalStorage(page) - Wipes LocalStorage for clean test state
   - getIndexedDBStore(page, dbName, storeName) - Retrieves all records from IndexedDB store

4. AC-2.1.4: Configure multi-browser support
   - Chromium project configured with Desktop Chrome device preset
   - Firefox project configured with Desktop Firefox device preset
   - WebKit project configured with Desktop Safari device preset
   - All three browsers run in parallel by default
   - Each browser project inherits base configuration

5. AC-2.1.5: Set up test scripts in package.json
   - test:e2e - Runs all tests in all browsers (headless mode)
   - test:e2e:ui - Opens Playwright UI mode for interactive test development
   - test:e2e:debug - Runs tests in debug mode with Playwright Inspector
   - All scripts use npx playwright to ensure consistent version

6. AC-2.1.6: Create .env.test.example with test environment variables
   - File created at project root with documented test configuration
   - Example variables: BASE_URL, TEST_TIMEOUT, HEADLESS, SLOW_MO
   - Comments explain purpose and default values
   - .env.test added to .gitignore

7. AC-2.1.7: Add tests/README.md with testing guidelines and patterns
   - Playwright setup instructions
   - PWA helper API documentation with usage examples
   - data-testid naming convention explained
   - Test organization patterns
   - Debugging guide (UI mode, trace viewer, inspector)
   - CI integration overview
   - Common pitfalls and solutions
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Epic 2 Technical Specification</title>
        <section>Story 2.1: Testing Framework Setup</section>
        <snippet>Establishes Playwright E2E testing framework with PWA-specific helpers for service worker, IndexedDB, and offline testing. Framework architecture includes multi-browser projects (Chromium, Firefox, WebKit), test execution strategy with 4 workers locally and 2 in CI, and auto-retry configuration.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Epic 2 Technical Specification</title>
        <section>Acceptance Criteria (Authoritative)</section>
        <snippet>Authoritative acceptance criteria extracted from epics.md: AC-2.1.1 through AC-2.1.7 covering Playwright installation, directory structure, PWA helpers, multi-browser support, test scripts, environment configuration, and documentation.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Non-Functional Requirements</section>
        <snippet>NFR001: Performance (load &lt;2s, 60fps); NFR002: Offline Support (fully functional after initial load); NFR003: Browser Compatibility (Chrome, Firefox, Safari, Edge); NFR006: Code Quality (TypeScript strict, ESLint compliance, &lt;10% duplication)</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>System Architecture</title>
        <section>Testing Strategy</section>
        <snippet>Current manual testing approach using Browser DevTools for IndexedDB inspection, Application tab for service worker status, network throttling for offline testing, and Lighthouse for PWA score validation.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>System Architecture</title>
        <section>PWA Architecture</section>
        <snippet>Progressive Web Application with service workers for offline capability, IndexedDB via idb 8.0.3 for data persistence, and Zustand persist middleware for state management. Installable to home screen with standalone display mode.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Definitions</title>
        <section>Story 2.1</section>
        <snippet>Developer story for scaffolding Playwright framework to enable comprehensive E2E testing. Prerequisites: Epic 1 complete (stable foundation to test against). Core value: Automated testing infrastructure prevents regressions as features expand in Epics 3-5.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>vite.config.ts</path>
        <kind>build-config</kind>
        <symbol>VitePWA configuration</symbol>
        <lines>10-58</lines>
        <reason>Service worker configuration via vite-plugin-pwa that tests need to validate. Base path '/My-Love/' must match Playwright baseURL.</reason>
      </artifact>
      <artifact>
        <path>src/stores/useAppStore.ts</path>
        <kind>state-management</kind>
        <symbol>useAppStore</symbol>
        <lines>all</lines>
        <reason>Zustand store with persist middleware that tests need to validate for LocalStorage persistence across browser sessions.</reason>
      </artifact>
      <artifact>
        <path>src/services/storage.ts</path>
        <kind>service</kind>
        <symbol>IndexedDB operations</symbol>
        <lines>all</lines>
        <reason>IndexedDB service layer using idb 8.0.3 that tests need to validate for data persistence and offline capability.</reason>
      </artifact>
      <artifact>
        <path>src/config/constants.ts</path>
        <kind>config</kind>
        <symbol>Application constants</symbol>
        <lines>all</lines>
        <reason>Hardcoded relationship data and configuration that tests may need to reference for assertions and test data setup.</reason>
      </artifact>
      <artifact>
        <path>package.json</path>
        <kind>config</kind>
        <symbol>scripts section</symbol>
        <lines>6-14</lines>
        <reason>Existing npm scripts (dev, build, test:smoke, deploy) that new test scripts (test:e2e, test:e2e:ui, test:e2e:debug) will be added alongside.</reason>
      </artifact>
      <artifact>
        <path>scripts/smoke-tests.cjs</path>
        <kind>test</kind>
        <symbol>smoke test implementation</symbol>
        <lines>all</lines>
        <reason>Reference implementation for testing patterns from Story 1.6 - demonstrates Node.js test approach, error handling, and validation logic.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <react version="^19.1.1">Core UI framework</react>
        <react-dom version="^19.1.1">React DOM renderer</react-dom>
        <zustand version="^5.0.8">State management with persist middleware</zustand>
        <idb version="^8.0.3">IndexedDB wrapper for data persistence</idb>
        <workbox-window version="^7.3.0">Service worker utilities</workbox-window>
        <framer-motion version="^12.23.24">Animation library for UI interactions</framer-motion>
        <lucide-react version="^0.548.0">Icon library</lucide-react>
      </node>
      <devDependencies>
        <typescript version="~5.9.3">TypeScript compiler</typescript>
        <vite version="^7.1.7">Build tool and dev server</vite>
        <vite-plugin-pwa version="^1.1.0">PWA manifest and service worker generation</vite-plugin-pwa>
        <eslint version="^9.36.0">Code quality linting</eslint>
        <tailwindcss version="^3.4.18">CSS framework</tailwindcss>
        <gh-pages version="^6.3.0">GitHub Pages deployment</gh-pages>
      </devDependencies>
      <toInstall>
        <playwright-test version="^1.48.0">E2E testing framework with multi-browser support</playwright-test>
      </toInstall>
    </dependencies>
  </artifacts>

  <constraints>
- **Framework Setup Only**: Story 2.1 creates testing infrastructure but does not implement feature tests (those come in Story 2.2)
- **No Application Code Changes**: Story 2.1 must not modify src/**/*.tsx or src/**/*.ts files (Story 2.3 will add data-testid attributes)
- **Base URL Alignment**: Playwright baseURL must match Vite dev server with base path: http://localhost:5173/My-Love/
- **PWA Architecture Testing**: Tests must validate offline-first capabilities including service worker registration, IndexedDB operations, and LocalStorage persistence
- **Multi-Browser Support Required**: All tests must run successfully in Chromium (Blink), Firefox (Gecko), and WebKit (Safari) to validate NFR003
- **TypeScript Strict Mode**: All test code must use TypeScript with strict mode enabled to maintain NFR006 code quality standards
- **CI/Local Configuration Differences**: Framework must detect process.env.CI to adjust retries (0 locally, 2 in CI) and workers (4 locally, 2 in CI)
- **Documentation Completeness**: tests/README.md must be comprehensive (300+ lines) with setup, PWA helpers API, patterns, debugging guide, and troubleshooting
- **Test Execution Performance**: Full test suite should complete in &lt;5 minutes locally, &lt;10 minutes in CI (NFR001 performance requirement)
- **No External Dependencies**: Tests must not require external APIs, services, or cloud-based test execution (maintain no-backend architecture)
  </constraints>
  <interfaces>
    <interface>
      <name>Playwright Test API</name>
      <kind>testing-framework</kind>
      <signature>import { test, expect, Page, Browser, BrowserContext } from '@playwright/test'</signature>
      <path>node_modules/@playwright/test (to be installed)</path>
    </interface>
    <interface>
      <name>Service Worker API</name>
      <kind>browser-api</kind>
      <signature>navigator.serviceWorker.ready: Promise&lt;ServiceWorkerRegistration&gt;</signature>
      <path>Web Platform API accessed via page.evaluate()</path>
    </interface>
    <interface>
      <name>IndexedDB API</name>
      <kind>browser-api</kind>
      <signature>indexedDB.open(name, version), indexedDB.deleteDatabase(name)</signature>
      <path>Web Platform API accessed via page.evaluate()</path>
    </interface>
    <interface>
      <name>LocalStorage API</name>
      <kind>browser-api</kind>
      <signature>localStorage.getItem(key), localStorage.setItem(key, value), localStorage.clear()</signature>
      <path>Web Platform API accessed via page.evaluate()</path>
    </interface>
    <interface>
      <name>Network Condition API</name>
      <kind>playwright-api</kind>
      <signature>page.context().setOffline(offline: boolean): Promise&lt;void&gt;</signature>
      <path>Playwright BrowserContext API</path>
    </interface>
    <interface>
      <name>Vite Dev Server</name>
      <kind>http-server</kind>
      <signature>http://localhost:5173/My-Love/ (base path configured in vite.config.ts)</signature>
      <path>vite.config.ts base: '/My-Love/'</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
      Epic 2 establishes automated E2E testing using Playwright with PWA-specific test utilities. Framework targets TypeScript strict mode, multi-browser execution (Chromium, Firefox, WebKit), and offline-first architecture validation. Test organization follows fixture pattern with reusable helpers in tests/support/helpers/pwaHelpers.ts. Tests must validate service worker registration, IndexedDB CRUD operations, LocalStorage persistence, and offline mode functionality. Debugging artifacts include HTML reports, screenshots, videos, and traces configured to capture on failure. CI integration uses GitHub Actions reporter with 2 retries for flakiness handling.
    </standards>
    <locations>
      tests/e2e/ - E2E test spec files (*.spec.ts pattern)
      tests/support/fixtures/ - Reusable test fixtures (Story 2.2 will populate)
      tests/support/helpers/ - PWA helper utilities (pwaHelpers.ts)
      playwright-report/ - HTML test reports (generated, gitignored)
      test-results/ - Test execution artifacts (screenshots, videos, traces, gitignored)
    </locations>
    <ideas>
      <test-idea ac="AC-2.1.1">
        <name>Playwright Configuration Validation</name>
        <description>Verify playwright.config.ts exists and has correct baseURL, timeout, retries, workers, trace, screenshot, video configuration. Run 'npx playwright test --list' to validate configuration loads without errors.</description>
      </test-idea>
      <test-idea ac="AC-2.1.2">
        <name>Directory Structure Validation</name>
        <description>Assert tests/e2e/, tests/support/fixtures/, tests/support/helpers/ directories exist and are accessible. Validate directory structure matches tech spec requirements.</description>
      </test-idea>
      <test-idea ac="AC-2.1.3">
        <name>Service Worker Helper Validation</name>
        <description>Test waitForServiceWorker helper by navigating to app URL and asserting service worker registration completes within timeout. Test with both successful registration and timeout scenarios.</description>
      </test-idea>
      <test-idea ac="AC-2.1.3">
        <name>IndexedDB Helper Validation</name>
        <description>Test clearIndexedDB and getIndexedDBStore helpers by creating test data in IndexedDB, retrieving it, then clearing and verifying deletion. Validate helper handles non-existent databases gracefully.</description>
      </test-idea>
      <test-idea ac="AC-2.1.3">
        <name>LocalStorage Helper Validation</name>
        <description>Test setLocalStorageItem, getLocalStorageItem, clearLocalStorage helpers by writing test data, reading it back, clearing, and verifying state changes. Assert return values match expected types (string | null).</description>
      </test-idea>
      <test-idea ac="AC-2.1.3">
        <name>Offline Mode Helper Validation</name>
        <description>Test goOffline and goOnline helpers by simulating network conditions and verifying app still functions offline (cached by service worker). Attempt external resource load while offline (should fail) and online (should succeed).</description>
      </test-idea>
      <test-idea ac="AC-2.1.4">
        <name>Multi-Browser Execution</name>
        <description>Run smoke test suite across all 3 browser projects (Chromium, Firefox, WebKit) and verify all tests pass. Validate HTML report shows separate results for each browser. Assert execution completes in &lt;2 minutes (parallel execution).</description>
      </test-idea>
      <test-idea ac="AC-2.1.5">
        <name>Test Script Validation</name>
        <description>Execute npm run test:e2e and verify tests run in headless mode with HTML report generated. Execute npm run test:e2e:ui and verify UI mode opens with test explorer. Execute npm run test:e2e:debug and verify Playwright Inspector pauses at first test.</description>
      </test-idea>
      <test-idea ac="AC-2.1.6">
        <name>Environment Configuration Validation</name>
        <description>Verify .env.test.example exists at project root with BASE_URL, TEST_TIMEOUT, HEADLESS, SLOW_MO variables documented. Verify .env.test is in .gitignore to allow local overrides.</description>
      </test-idea>
      <test-idea ac="AC-2.1.7">
        <name>Documentation Completeness Validation</name>
        <description>Verify tests/README.md exists with sections for setup, PWA helpers API, data-testid convention, patterns, debugging guide, CI integration, and pitfalls. Assert documentation includes function signatures, usage examples, and troubleshooting guidance.</description>
      </test-idea>
    </ideas>
  </tests>
</story-context>
