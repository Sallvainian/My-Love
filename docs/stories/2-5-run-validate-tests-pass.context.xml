<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>5</storyId>
    <title>Run & Validate Tests Pass</title>
    <status>drafted</status>
    <generatedAt>2025-10-31</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/2-5-run-validate-tests-pass.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer</asA>
    <iWant>all tests to pass with 100% coverage of Epic 1 features</iWant>
    <soThat>I have confidence in the stability of the foundation</soThat>
    <tasks>
- Run baseline test suite and capture current status (AC: 1, 2, 3)
  - Execute: `npm run test:e2e` (full suite, all browsers)
  - Capture: Total test count, pass/fail counts per browser
  - Review: Playwright console output for warnings or errors
  - Check: HTML report generated at `playwright-report/index.html`
  - Document: Baseline test status (how many tests exist currently)

- Validate test coverage against Epic 1 features (AC: 1, 2)
  - Create checklist: Epic 1 features from epics.md (Stories 1.1-1.6)
  - Map features to test suites
  - Verify critical user paths tested
  - Calculate coverage percentage
  - Document coverage gaps if < 100%

- Resolve any failing tests to achieve 100% pass rate (AC: 3)
  - Identify failing test(s) if any
  - Debug using Playwright Inspector
  - Fix test or application code
  - Rerun to verify fix

- Measure test execution time and optimize if needed (AC: 4)
  - Run with time measurement: `time npm run test:e2e`
  - Compare to target: < 5 minutes (300 seconds)
  - Optimize slow tests if needed

- Validate test reliability with 10 consecutive runs (AC: 5)
  - Run flakiness test 10 times
  - Calculate pass rate: target ≥ 99%
  - Fix flaky tests if detected

- Verify HTML report generation with failure screenshots (AC: 6)
  - Verify report exists at playwright-report/index.html
  - Review report contents (test matrix, timeline, pass/fail counts)
  - Trigger intentional failure to verify screenshot capture

- Document known limitations and edge cases (AC: 7)
  - Review test suite scope vs Epic 1 complete scope
  - List edge cases not covered
  - Document browser-specific limitations
  - Update tests/README.md with "Known Limitations" section

- Final validation and documentation (AC: all)
  - Run final test suite
  - Confirm all acceptance criteria met
  - Update story status in sprint-status.yaml
  - Document completion in story file Dev Agent Record
    </tasks>
  </story>

  <acceptanceCriteria>
AC-2.5.1: All Epic 1 features have corresponding E2E tests
- Verify test coverage checklist: message display, favorites, settings, navigation, persistence
- Confirm each Epic 1 feature (Stories 1.1-1.6) has at least one test suite
- Validate critical user paths covered: daily message view, favorite toggle, settings edit, theme switch

AC-2.5.2: Test coverage report shows 100% of critical user paths covered
- Generate test coverage report from test execution
- Review HTML report test matrix (features × browsers)
- Confirm all 37 planned test cases implemented and passing
- Document coverage gaps if any (with justification)

AC-2.5.3: All tests pass in all configured browsers (Chromium, Firefox, WebKit)
- Run full test suite: `npm run test:e2e`
- Verify Chromium tests: all passing
- Verify Firefox tests: all passing
- Verify WebKit tests: all passing (or document known issues)
- Check for browser-specific failures and resolve

AC-2.5.4: Tests run in under 5 minutes total
- Measure full test suite execution time (wall clock)
- Target: < 5 minutes for 37 tests × 3 browsers = 111 executions
- Identify slow tests (> 15 seconds individual execution)
- Optimize slow tests or document performance bottlenecks

AC-2.5.5: No flaky tests (consistent pass rate across 10 runs)
- Run test suite 10 consecutive times
- Calculate pass rate: (successful runs / 10) × 100%
- Target: 99%+ pass rate (maximum 1 flaky run out of 10)
- Document flakiness patterns if detected
- Fix flaky tests before marking story complete

AC-2.5.6: Generate HTML test report with screenshots on failure
- Verify HTML report generated: `playwright-report/index.html`
- Confirm report includes: test matrix, execution timeline, pass/fail counts
- Trigger test failure intentionally, verify screenshot captured
- Validate screenshot shows failure context (element state, page UI)

AC-2.5.7: Document any known limitations or edge cases not covered
- Review test suite for gaps: features tested vs Epic 1 scope
- Document edge cases deferred (e.g., storage quota edge cases)
- List browser-specific limitations (e.g., WebKit IndexedDB quirks)
- Update tests/README.md with known limitations section
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.5: Run & Validate Tests Pass</section>
        <snippet>Story 2.5 is the validation checkpoint for Epic 2, ensuring complete test infrastructure delivers 100% coverage of Epic 1 features with reliable, fast tests. Core requirements: 100% Epic 1 coverage, multi-browser validation, < 5 min execution, zero flakiness, HTML reporting with screenshots.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Epic 2 Technical Specification</title>
        <section>Story 2.5 Validation</section>
        <snippet>Story 2.5 validates test infrastructure against quantitative NFR targets: < 5 min execution for 37 tests × 3 browsers, < 1% flaky rate, 100% Epic 1 critical paths. Test coverage breakdown: Message Display (10), Favorites (8), Settings (6), Navigation (5), Persistence (8) = 37 test cases.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR001: Performance Requirements</section>
        <snippet>App shall load in under 2 seconds and maintain 60fps animations. Test suite validates through PWA helpers (service worker timing) and visual regression checks (animation smoothness).</snippet>
      </doc>
      <doc>
        <path>tests/README.md</path>
        <title>Testing Documentation</title>
        <section>Testing Infrastructure Setup</section>
        <snippet>Comprehensive guide for writing, running, and debugging E2E tests. Covers PWA test helpers, data-testid conventions, test organization, debugging, and CI integration. Key commands: npm run test:e2e (all browsers), npm run test:e2e:ui (interactive), npm run test:e2e:debug (step-through).</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>tests/e2e/message-display.spec.ts</path>
        <kind>test</kind>
        <symbol>DailyMessage Test Suite</symbol>
        <lines>all</lines>
        <reason>Tests message display, rotation algorithm, animations, duration counter - validates Epic 1 Story 1.4 pre-configuration and message behavior</reason>
      </artifact>
      <artifact>
        <path>tests/e2e/favorites.spec.ts</path>
        <kind>test</kind>
        <symbol>Favorites Test Suite</symbol>
        <lines>all</lines>
        <reason>Tests favorite toggle, persistence, offline mode - validates Epic 1 Story 1.2 (Zustand persist) and Story 1.3 (IndexedDB/SW fix)</reason>
      </artifact>
      <artifact>
        <path>tests/e2e/settings.spec.ts</path>
        <kind>test</kind>
        <symbol>Settings Test Suite</symbol>
        <lines>all</lines>
        <reason>Tests pre-configured relationship data, settings edits, persistence - validates Epic 1 Story 1.4 (hardcoded constants)</reason>
      </artifact>
      <artifact>
        <path>tests/e2e/navigation.spec.ts</path>
        <kind>test</kind>
        <symbol>Navigation Test Suite</symbol>
        <lines>all</lines>
        <reason>Tests theme switching, view transitions - validates Epic 1 navigation and theme functionality</reason>
      </artifact>
      <artifact>
        <path>tests/e2e/persistence.spec.ts</path>
        <kind>test</kind>
        <symbol>Persistence Test Suite</symbol>
        <lines>all</lines>
        <reason>Tests LocalStorage/IndexedDB operations, quota handling, offline scenarios - validates Epic 1 Story 1.2 and 1.3 persistence fixes</reason>
      </artifact>
      <artifact>
        <path>tests/e2e/setup-validation.spec.ts</path>
        <kind>test</kind>
        <symbol>Setup Validation Test Suite</symbol>
        <lines>all</lines>
        <reason>Validates test infrastructure setup and PWA helpers functionality</reason>
      </artifact>
      <artifact>
        <path>playwright.config.ts</path>
        <kind>config</kind>
        <symbol>Playwright Configuration</symbol>
        <lines>1-99</lines>
        <reason>Test framework configuration: multi-browser setup (Chromium, Firefox, WebKit), webServer auto-start, timeout settings, reporter config. Key settings: 30s timeout, 4 workers locally, webServer auto-start with 120s timeout.</reason>
      </artifact>
      <artifact>
        <path>tests/helpers/pwa-helpers.ts</path>
        <kind>helper</kind>
        <symbol>PWA Test Helpers</symbol>
        <lines>all</lines>
        <reason>Utilities for testing service worker, IndexedDB, offline mode - used across all test suites for PWA-specific scenarios</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package>@playwright/test</package>
        <version>^1.56.1</version>
        <scope>devDependencies</scope>
        <reason>Test framework for E2E testing</reason>
      </package>
      <package>react</package>
        <version>^19.1.1</version>
        <scope>dependencies</scope>
        <reason>UI framework being tested</reason>
      </package>
      <package>zustand</package>
        <version>^5.0.8</version>
        <scope>dependencies</scope>
        <reason>State management with persist middleware (Story 1.2 fix)</reason>
      </package>
      <package>idb</package>
        <version>^8.0.3</version>
        <scope>dependencies</scope>
        <reason>IndexedDB wrapper (Story 1.3 fix)</reason>
      </package>
      <package>workbox-window</package>
        <version>^7.3.0</version>
        <scope>dependencies</scope>
        <reason>Service worker integration</reason>
      </package>
      <package>vite</package>
        <version>^7.1.7</version>
        <scope>devDependencies</scope>
        <reason>Dev server auto-started by webServer config</reason>
      </package>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>All 124 tests (not just 37 planned) must pass across Chromium and Firefox (WebKit disabled due to system dependencies)</constraint>
    <constraint>Test execution must complete in under 5 minutes (300 seconds) for full suite</constraint>
    <constraint>Test reliability target: ≥ 99% pass rate across 10 consecutive runs (maximum 1 flaky run)</constraint>
    <constraint>HTML report must generate at playwright-report/index.html with screenshots on failure</constraint>
    <constraint>Firefox IndexedDB issue from Story 2.4 must be investigated and resolved to achieve 100% pass rate</constraint>
    <constraint>Story is validation only - no new tests written, no application code changes (except documentation)</constraint>
    <constraint>Must validate webServer auto-start works correctly (Story 2.4 dependency)</constraint>
    <constraint>Documentation standards: Match quality of Story 2.4's 400+ line webServer documentation section</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>npm run test:e2e</name>
      <kind>CLI command</kind>
      <signature>npm run test:e2e [playwright test options]</signature>
      <path>package.json:12</path>
      <description>Primary command to run full E2E test suite across all configured browsers</description>
    </interface>
    <interface>
      <name>Playwright webServer</name>
      <kind>configuration</kind>
      <signature>webServer: { command, url, reuseExistingServer, timeout }</signature>
      <path>playwright.config.ts:92-97</path>
      <description>Auto-starts Vite dev server before tests. Configured with 120s timeout, reuses existing server locally.</description>
    </interface>
    <interface>
      <name>PWA Test Helpers</name>
      <kind>utility API</kind>
      <signature>waitForServiceWorker(page), clearIndexedDB(page), goOffline(context), goOnline(context)</signature>
      <path>tests/helpers/pwa-helpers.ts</path>
      <description>Utilities for PWA-specific testing scenarios (service worker, IndexedDB, offline mode)</description>
    </interface>
    <interface>
      <name>HTML Reporter</name>
      <kind>test output</kind>
      <signature>playwright-report/index.html</signature>
      <path>playwright.config.ts:35</path>
      <description>Visual test report with test matrix, timeline, screenshots on failure. Generated after each test run.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
E2E testing uses Playwright with multi-browser support (Chromium, Firefox; WebKit disabled). Tests are organized by feature domain (message-display, favorites, settings, navigation, persistence) with PWA-specific helpers for service worker, IndexedDB, and offline testing. Configuration supports parallel execution (4 workers locally, 2 in CI) with automatic dev server start via webServer option. Tests use data-testid selectors for stable element targeting. Test timeout: 30s globally, 45s for Chromium (IndexedDB operations slower). Retry strategy: 0 retries locally (fast feedback), 2 retries in CI (handle transient failures). Reports: HTML (playwright-report/) and GitHub Actions annotations.
    </standards>
    <locations>
      <location>tests/e2e/*.spec.ts - All E2E test suites</location>
      <location>tests/helpers/pwa-helpers.ts - PWA testing utilities</location>
      <location>playwright.config.ts - Test framework configuration</location>
      <location>playwright-report/ - Generated HTML reports (not committed)</location>
    </locations>
    <ideas>
      <idea ac="AC-2.5.1, AC-2.5.2">Validate Epic 1 feature coverage mapping: Story 1.2 → persistence.spec.ts (LocalStorage), Story 1.3 → persistence.spec.ts (IndexedDB), Story 1.4 → settings.spec.ts (pre-configuration), Story 1.5 → all tests (regression detection)</idea>
      <idea ac="AC-2.5.3">Run Firefox tests separately to isolate IndexedDB failure: npx playwright test --project=firefox --debug</idea>
      <idea ac="AC-2.5.4">Profile slow tests using HTML report execution timeline; identify tests > 15s individual execution</idea>
      <idea ac="AC-2.5.5">Automate flakiness detection: for i in {1..10}; do npm run test:e2e || echo "Run $i failed"; done | tee flakiness-log.txt</idea>
      <idea ac="AC-2.5.6">Test screenshot capture by temporarily breaking assertion in setup-validation.spec.ts</idea>
      <idea ac="AC-2.5.7">Document known limitations in tests/README.md: Story 1.1 (analysis only), Story 1.6 (build validation manual), storage quota edge cases, WebKit disabled (system dependencies), Firefox IndexedDB quirks (if applicable)</idea>
    </ideas>
  </tests>
</story-context>
